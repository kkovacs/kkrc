# CTRL-Q is much natural than CTRL-B, and doesn't clash with screen's CTRL-A.
# (CTRL-Q = XOFF anyway, which you most likely don't use in the 21st century)
set -g prefix c-q

# Design. Use only plain unicode, still look somewhat special. No powerline special font needed
#sepa=''	# Design #0
#sepa='▌'	# Design #1
#sepa='▌▌'	# Design #2
#sepa='▚'	# Design #3
#sepa='▄'	# Design #4
#sepa='▏▎▍▌▋▊▉'	# Design #5
sepa='▎▌▊'	# Design #6

# Status command on the right, between the clock and the screen size.
#mystat="%Y-%m-%d %a"			# Date with DOW, OS independent
mystat="#(ipconfig getifaddr en0 || echo No WiFi)"	# WiFi IP on OS X

# Theme originally from https://github.com/jimeh/tmux-themepack/blob/master/powerline/block/magenta.tmuxtheme
# and slightly modified (see below). You can find other color schemes there too!
# I switched color90 => color125
set -g status-style fg=colour240,bg=colour233
set -g status-left-style bg=colour233,fg=colour243
set -g status-right-style bg=colour233,fg=colour243
set -g status-right-length 150
set -g window-status-format " #I:#W#F "
set -g window-status-current-format " #I:#W#F "
set -g window-status-current-style bg=colour125,fg=colour232
set -g window-status-activity-style bg=colour233,fg=colour141
set -g window-status-separator ""
set -g status-justify centre
set -g pane-border-style bg=default,fg=colour238
set -g pane-active-border-style bg=default,fg=colour125
set -g display-panes-colour colour233
set -g display-panes-active-colour colour245
set -g clock-mode-colour colour125
set -g clock-mode-style 24
set -g message-style bg=colour125,fg=black
set -g message-command-style bg=colour233,fg=black
set -g mode-style bg=colour125,fg=colour231

# Modifications compared to the original theme
set -g status-left-length 100
set -g status-left "#[fg=colour232,bg=colour125,bold] #S:#I.#P#{?client_last_session, S, -}#{?mouse,, [NOMOUSE]}#{?session_many_attached, [MANY],""}#{?synchronize-panes, [BROADCASTING],""}#{?window_zoomed_flag, [ZOOM],""}#{?pane_pipe, [PIPE],""} #[fg=colour240,bg=colour125,nobold]$sepa#[fg=colour233,bg=colour240] #{?client_prefix,Q,-}#{?#{==:#{client_key_table},inject},R,-} #{?alternate_on,A,-} #{?monitor-activity,a,-}#{?monitor-silence,s,-} #[fg=colour235,bg=colour240]$sepa#[fg=colour240,bg=colour235] #{pane_pid} #[fg=colour233,bg=colour235,nobold]$sepa"
set -g status-right "#[fg=colour235,bg=colour233]$sepa#[fg=colour240,bg=colour235] %H:%M %Z #[fg=colour240,bg=colour235]$sepa#[fg=colour233,bg=colour240] $mystat #[fg=colour245,bg=colour240]$sepa#[fg=colour232,bg=colour245,bold] #{pane_width}x#{pane_height} "

# Force the status line to ON
set -g status on

# Allow to send CTRL-Q
bind q send-prefix

# CTRL-Q CTRL-Q goes back to last window, like in screen
bind c-q last-window
#set -g base-index 1

# To make screen easier to use if accidentally hit CTRL-Q instead of CTRL-A or CTRL-W
bind c-a send-keys c-a
bind a send-keys c-a
bind w send-keys c-w

# Toggle broadcasting input to all panes.
bind b set synchronize-panes

# Toggle tmux "mouse" functionality
# XXX c-m is not really usable: it's ENTER
#bind "c-m" set mouse

# Copy mode
bind Escape copy-mode
# Paste immediately
bind c-p paste-buffer
# Select what buffer to paste
bind p choose-buffer -Z
bind P choose-buffer
# Keys INSIDE copy-mode
bind -T copy-mode-vi Escape send -X cancel
bind -T copy-mode-vi Space send -X clear-selection
bind -T copy-mode-vi v send -X begin-selection
bind -T copy-mode-vi V send -X select-line
bind -T copy-mode-vi C-v send -X rectangle-toggle
bind -T copy-mode-vi Enter send -X copy-selection-and-cancel
bind -T copy-mode-vi y send -X copy-selection-and-cancel
bind -T copy-mode-vi Y send -X append-selection-and-cancel
bind -T copy-mode-vi c-y send -X copy-pipe-and-cancel 'cat >>~/Desktop/tmux-copy.#S.#I.#P.#W.txt'
# Copy to different registers
bind -T copy-mode-vi "\"" switch-client -T copy-mode-vi-registers
bind -T copy-mode-vi-registers "1" send -X copy-selection-and-cancel \; set-buffer -n 1
bind -T copy-mode-vi-registers "2" send -X copy-selection-and-cancel \; set-buffer -n 2
bind -T copy-mode-vi-registers "3" send -X copy-selection-and-cancel \; set-buffer -n 3
bind -T copy-mode-vi-registers "4" send -X copy-selection-and-cancel \; set-buffer -n 4
bind -T copy-mode-vi-registers "5" send -X copy-selection-and-cancel \; set-buffer -n 5
bind -T copy-mode-vi-registers "6" send -X copy-selection-and-cancel \; set-buffer -n 6
bind -T copy-mode-vi-registers "7" send -X copy-selection-and-cancel \; set-buffer -n 7
bind -T copy-mode-vi-registers "8" send -X copy-selection-and-cancel \; set-buffer -n 8
bind -T copy-mode-vi-registers "9" send -X copy-selection-and-cancel \; set-buffer -n 9
bind -T copy-mode-vi-registers "?" list-keys -T copy-mode-vi-registers
# In normal mode, double-clicking starts selection of word
bind -n DoubleClick1Pane select-pane \; copy-mode \; send-keys -X select-word
# Set word separators for word selection
set -g word-separators " `'\"{}()[],;<>"
# Do not auto-copy on mouse drag end
unbind -T copy-mode-vi MouseDragEnd1Pane
# Write to system clipboard, but don't read it
set -s set-clipboard external
# Deprecated by the above setting, but for reference:
# Linux:
#bind -T copy-mode-vi 'Y' send -X copy-pipe-and-cancel 'xclip -in -selection clipboard'"
# OS X:
#bind -T copy-mode-vi 'Y' send -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"

# Pane management
bind Enter select-pane -m
bind S join-pane
bind V join-pane -h
bind o break-pane
bind O break-pane -d

# Various comfort settings stolen from all over the net
set -g default-terminal screen-256color
set -g status-keys vi
set -g renumber-windows on
set -g history-limit 100000
setw -g mode-keys vi
setw -g mouse on
# Automatically set window title
setw -g automatic-rename on
set -g set-titles on
# No delay for escape key press
set -sg escape-time 0
# Leave messages on longer (or until keypress)
set -g display-time 1500
# Switch to a remaining session if one session is exited
set -g detach-on-destroy off

# Split vertically
bind v split-window -h
# Split horizontally
bind s split-window -v
# Window chooser
bind "\"" choose-window -Z
bind "\'" choose-session -Z
# New session
bind C command-prompt "new-session -s '%%'"
# Rename window
bind A command-prompt -I "#W" "rename-window '%%'"
# Move pane to window
bind M choose-window -Z "move-pane -h -t '%%'"
# Move window to session and switch to there
bind m choose-session -Z "move-window -t \"%1\"; switch-client -t \"%1\""
# Move window left and right
bind , swap-window -t -1
bind . swap-window -t +1

# Pane layouts
bind > next-layout
bind < previous-layout
# Spread out panes equally
bind = select-layout -E

# Move panes around
# XXX Same as default
#bind { swap-pane -U
#bind } swap-pane -D

# Pane resize options
bind J resize-pane -D 5
bind K resize-pane -U 5
bind H resize-pane -L 5
bind L resize-pane -R 5

# Vim style pane selection
bind h select-pane -L
bind j select-pane -D 
bind k select-pane -U
bind l select-pane -R
bind c-h select-pane -L
bind c-j select-pane -D 
bind c-k select-pane -U
bind c-l select-pane -R
bind [ select-pane -t :.-
bind ] select-pane -t :.+
bind Tab select-pane -t :.+
bind i display-panes

# Use Alt-arrow keys without prefix key to switch panes
bind -n M-Left select-pane -L
bind -n M-Right select-pane -R
bind -n M-Up select-pane -U
bind -n M-Down select-pane -D

# To interate through windows with space and backspace
bind BSpace previous-window
bind Space next-window
bind n next-window
bind N previous-window
# Jump to window with bell
bind c-x next-window -a
bind X previous-window -a

# Scroll wheel should trigger tmux scrollback if NOT alernate_on, should send 5 Up/Down if there's an alt mode app inside
#bind -T root WheelUpPane if-shell -F -t = "#{alternate_on}" "select-pane -t =; send-keys PPage" "select-pane -t =; copy-mode -e; send-keys -M"
#bind -T root WheelDownPane if-shell -F -t = "#{alternate_on}" "select-pane -t =; send-keys NPage" "select-pane -t =; send-keys -M"
bind -T root WheelUpPane if-shell -F -t = "#{alternate_on}" "select-pane -t =; send-keys Up Up Up Up Up" "select-pane -t =; copy-mode -e; send-keys -M"
bind -T root WheelDownPane if-shell -F -t = "#{alternate_on}" "select-pane -t =; send-keys Down Down Down Down Down" "select-pane -t =; send-keys -M"

# Toggle monitoring activity and/or silence. Have the same keys as `screen`
bind "#" setw monitor-activity
bind _ if -F '#{monitor-silence}' 'setw monitor-silence 0' 'setw monitor-silence 30'
# Global default
setw -g monitor-activity off

# Clear pane
bind r send-keys -R \; clear-history \; refresh-client \; send-keys ^L

# Kill pane/window
bind x confirm-before -p "kill-pane #P? (y/n)" kill-pane

# Log pane output to file (toggle)
bind | pipe-pane -o 'cat >>~/Desktop/tmux-output.#S.#I.#P.#W.txt'

# Hardcopy pane visible
bind y command-prompt -1 -p "Hardcopy VISIBLE pane in (a)scii or (c)olor?" "if-shell -F '#{==:%%,a}' 'capture-pane -J -b hardcopy' 'capture-pane -e -b hardcopy' ; save-buffer -b hardcopy '$HOME/Desktop/tmux-visible.#S.#I.#P.#W.#{client_activity}.txt' ; delete-buffer -b hardcopy ; display Saved"
# Hardcopy pane history
bind Y command-prompt -1 -p "Hardcopy HISTORY of pane in (a)scii or (c)olor?" "if-shell -F '#{==:%%,a}' 'capture-pane -S - -J -b hardcopy' 'capture-pane -S - -e -J -b hardcopy' ; save-buffer -b hardcopy '$HOME/Desktop/tmux-history.#S.#I.#P.#W.#{client_activity}.txt' ; delete-buffer -b hardcopy ; display Saved"

# Reload tmux config
bind R source-file ~/.tmux.conf\; display "Config reloaded!"

# Inject bash config. Easiest key, used all the time
bind c-w load-buffer -b staticsendbuf ~/.kkrc/inject-bash.txt \; paste-buffer -d -b staticsendbuf
# Inject bash config as if BROADCAST to all panes of current window.
bind W load-buffer -b staticsendbuf ~/.kkrc/inject-bash.txt \; run-shell -b 'for a in $(tmux list-panes -F \#\D); do tmux paste-buffer -t "$a" -b staticsendbuf; done; tmux delete-buffer staticsendbuf; exit 0'
# Inject minimalist ash config. Second easiest key, used a lot
bind c-e load-buffer -b staticsendbuf ~/.kkrc/inject-ash.txt \; paste-buffer -d -b staticsendbuf

# For further use:
#bind "^" usable
#bind "\\" usable
#bind "@" usable
#bind "%" usable (default: split)
#bind "!" usable (default: break-pane)
#bind "\$" usable
#bind "&" usable (default: kill-pane, but we have "X" instead)
#bind "/" usable
#bind "-" usable (default: delete-buffer)
#bind "+" usable
#bind "*" usable
#bind "d" usable (default: detach)
#bind "e" usable
#bind "g" usable
#bind "u" usable
#bind "B" usable
#bind "F" usable
#bind "G" usable
#bind "I" usable
#bind "Q" usable
#bind "T" usable
#bind "T" usable
#bind "Z" usable
#bind "c-c" usable
#bind "c-d" usable
#bind "c-f" usable
#bind "c-g" usable
#bind "c-n" usable
#bind "c-s" usable
#bind "c-t" usable
#bind "c-u" usable
#bind "c-v" usable
#bind "c-y" usable

# Switch to alternate table
bind "c-r" switch-client -T inject

# Show possible keys in table "inject"
bind -T inject "?" list-keys -T inject
# Load tmux.local
bind -T inject "0" source-file ~/.tmux.local
# Inject vim config
bind -T inject "v" confirm-before -p "Inject vim?" "load-buffer -b staticsendbuf ~/.kkrc/inject-vim.txt \; paste-buffer -d -b staticsendbuf"
# Inject GNU Screen config
bind -T inject "s" confirm-before -p "Inject screen?" "load-buffer -b staticsendbuf ~/.kkrc/inject-screen.txt \; paste-buffer -d -b staticsendbuf"
# Change GNU screen colors from blue to red (to visually indicate a PROD system)
bind -T inject "S" load-buffer -b staticsendbuf ~/.kkrc/inject-screen-red.txt \; paste-buffer -d -b staticsendbuf
# Inject psql config
bind -T inject "p" confirm-before -p "Inject psql?" "load-buffer -b staticsendbuf ~/.kkrc/.psqlrc \; paste-buffer -d -b staticsendbuf"
# Inject "lxl" command for a better "lxd list"
bind -T inject "l" load-buffer -b staticsendbuf ~/.kkrc/inject-func-lxl.txt \; paste-buffer -d -b staticsendbuf
# Inject "hl" command to highlight grep, tail etc
bind -T inject "h" load-buffer -b staticsendbuf ~/.kkrc/inject-func-hl.txt \; paste-buffer -d -b staticsendbuf
# Add ssh public key to authorized_keys. Create dir if necessary, take care of permissions
bind -T inject "k" confirm-before -p "Add ssh key to authorized_keys?" "send-keys \" (umask 077; mkdir ~/.ssh 2>/dev/null; echo >>~/.ssh/authorized_keys '\" \; load-buffer -b staticsendbuf ~/.ssh/id_ed25519.pub \; paste-buffer -d -s '' -b staticsendbuf \; send-keys \"')\" enter"
bind -T inject "K" confirm-before -p "Install kkrc?" "send-keys \" git clone https://github.com/kkovacs/kkrc/ ~/.kkrc; ~/.kkrc/install.sh\" enter"
# Poor server's Ansible. :)
bind -T inject "b" confirm-before -p "Setup .bashrc?" "load-buffer -b staticsendbuf ~/.kkrc/inject-setup-bashrc.txt \; paste-buffer -d -b staticsendbuf"
# Debian/Ubuntu: put warning about system being PROD in /etc/debian_chroot, becase even the default bashrc displays it (both root and user).
bind -T inject "B" confirm-before -p "Put PROD warning into /etc/debian_chroot?" "send-keys ' printf \"\\033[00;31mPRODUCTION SERVER\\033[00m\" >/etc/debian_chroot' enter"
# Install must-have packages on the remote system (Debian & derivatives)
bind -T inject "a" confirm-before -p "apt-get basic packages?" "send-keys ' sudo apt-get install -y less psmisc screen htop curl wget bash-completion dnsutils rename git tig socat rsync vim-tiny zip unzip tree mtr-tiny unattended-upgrades iftop' #enter"
# Install must-have packages on the remote system (RedHat & derivatives)
bind -T inject "y" confirm-before -p "yum install basic packages?" "send-keys ' sudo yum install -y epel-release && sudo yum install -y less psmisc screen htop curl wget bash-completion bind-utils util-linux git tig socat rsync vim zip unzip tree mtr iftop' #enter"
# Which OS is this again?
bind -T inject "o" send-keys " cat /etc/os-release" enter
bind -T inject "q" send-keys " unset QUOTING_STYLE" enter # For CentOS and other ancient systems

# Paste numbered registers. Set them with:
# set-buffer -b 1 "...\n", or using "<1-9> (like buffer selection in VI) in copy-mode
bind -T inject "1" paste-buffer -b 1
bind -T inject "2" paste-buffer -b 2
bind -T inject "3" paste-buffer -b 3
bind -T inject "4" paste-buffer -b 4
bind -T inject "5" paste-buffer -b 5
bind -T inject "6" paste-buffer -b 6
bind -T inject "7" paste-buffer -b 7
bind -T inject "8" paste-buffer -b 8
bind -T inject "9" paste-buffer -b 9

# Local commands:
#source-file -q ~/.tmux.local
