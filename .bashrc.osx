#!/bin/bash

# NOTE: This file is not loaded automatically, because it's not needed in ALL OS X installs, just on client machines (my notebook).
# It's recommended to load from .bashrc.local :
# . ~/.kkrc/.bashrc.osx

export PATH="/opt/homebrew/bin:/opt/homebrew/sbin:$PATH"
# NOTE: Use this if you can't add `IdentityAgent ~/.gnupg/S.gpg-agent.ssh` to your `.ssh/config`
#export SSH_AUTH_SOCK="/Users/$USER/.gnupg/S.gpg-agent.ssh"

# This is my preferred way of working with Ubuntu multipass on OS X.
function vm()
{
	local name dir
	case "$1" in
		"ls" | "list" | "")
			multipass list
			;;
		"stop")
			while [ $# -gt 1 ]; do
				shift
				multipass stop "$1"
			done
			multipass list
			;;
		"rm" | "kill")
			while [ $# -gt 1 ]; do
				shift
				multipass stop "$1"
				multipass delete -v -p "$1"
			done
			multipass list
			;;
		"ip")
			multipass info "$2" | grep '^IPv4' | awk '{print $2}'
			;;
		"ssh")
			name="${2}"
			shift; shift;
			# NOTE: Using "ubuntu" user, because multipass's "mount" uses it.
			# NOTE: Agent forwarding ON by default
			ssh -A ubuntu@$(vm ip "${name}") "$@"
			;;
		*)
			# Start a new VM
			name="${1}"
			dir="${2:-/Users/user/wrk}"
			shift; shift;
			# Sorry for identation, it's necessary because of the HEREDOC
			eval "cat <<EOF
$(<~/.kkrc/other/cloud-config.multipass.yml)
EOF" | multipass launch --cloud-init - -v -n "${name}" "$@" 22.04
			# Check if mount was already set up or not
			if multipass info "$name" | grep "Mounts: *--"; then
				multipass stop "$name" # Stop/start needed for native mount
				multipass mount --type native "$dir" "$name:/persist"
				multipass start "$name" # Stop/start needed for native mount
			fi
			tmux rename-window "${name}"
			#multipass shell "${name}"
			vm ssh "${name}"
			;;
	esac
}

# Get/set DNS on OS X
function dns()
{
	if [ $# -eq 1 ]; then
		networksetup -setdnsservers Wi-Fi "$1"
	elif [ $# -eq 2 ]; then
		networksetup -setdnsservers "$1" "$2"
	fi
	networksetup -getdnsservers Wi-Fi
}

#alias nets="networksetup -listallhardwareports"
